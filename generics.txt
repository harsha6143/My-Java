generics:

	main objective:

		-provide type safety
		-resolve type casting problems


case 1: type safety
		
arrays are type safe we can give the garantee for the type of elements present inside array for example if our program requirement is to hold only string type of objects we can choose string array by mistae if we are trying to add any other type of objects we will get compile time error 

class test {
    public static void main(String[] args) {
        String[] s=new String[1000];
        s[0]="harsha";
        s[2]="umar";
        s[3]=22;------------------>CE:incompatible type

    }
}

only strings are allowed due to this we can garentee type safety

collections are not type safe

lets use collection for the same case

class test {
    public static void main(String[] args) {
        ArrayList l=new ArrayList();
        l.add("harsha");
        l.add("umar");
        l.add(22);
        l.add("hello");
        System.out.println(l);

        Iterator itr=l.iterator();
        while(itr.hasNext()){
            System.out.println(itr.next());
        }
    }
}



hence we cant give the garentee of type safety






class Box<T> {
    private T value;
    public Box(T value) {
        this.value = value;
    }
    public T getValue() {
        return value;
    }

    public void setValue(T value) {
        this.value = value;
    }
}

class test {
    public static void main(String[] args) {
        Box<Integer> integerBox = new Box<>(10);
        System.out.println(integerBox.getValue());

        Box<String> stringBox = new Box<>("Hello, Generics!");
        System.out.println(stringBox.getValue());

        Box<Double> doubleBox = new Box<>(3.14);
        System.out.println(doubleBox.getValue());

    }
}

